{
  "version": 3,
  "sources": [
    "@uirouter/angular/directives/uiSrefStatus.ts"
  ],
  "names": [],
  "mappings": "AAAA,iCAAC;AACD,MAAM;AACN,OAAO,EAAE,SAAA,EAAW,MAAA,EAAQ,YAAA,EAAc,eAAA,EAA2B,MAAO,eAAA,CAAgB;AAC5F,OAAO,EAAE,MAAA,EAAO,MAAO,UAAA,CAAW;AAClC,OAAO,EAC2C,QAAA,EAAU,IAAA,EAAM,OAAA,EAAoB,eAAA,EAAiB,KAAA,EAAO,SAAA,EAC7G,MAAM,gBAAA,CAAiB;AAIxB,OAAO,EAAE,eAAA,EAAgB,MAAO,sBAAA,CAAuB;AAEvD,OAAO,EAAE,EAAA,EAAG,MAAO,oBAAA,CAAqB;AACxC,OAAO,EAAE,WAAA,EAAY,MAAO,6BAAA,CAA8B;AAC1D,OAAO,EAAE,aAAA,EAAc,MAAO,+BAAA,CAAgC;AAC9D,OAAO,EAAE,SAAA,EAAU,MAAO,yBAAA,CAA0B;AACpD,OAAO,EAAE,GAAA,EAAI,MAAO,mBAAA,CAAoB;AACxC,OAAO,EAAE,MAAA,EAAO,MAAO,sBAAA,CAAuB;AAqB9C,mBAAmB;AACnB,IAAM,cAAA,GAA6B;IACjC,MAAM,EAAE,KAAA;IACR,KAAK,EAAE,KAAA;IACP,QAAQ,EAAE,KAAA;IACV,OAAO,EAAE,KAAA;IACT,YAAY,EAAE,EAAA;CACf,CAAC;AAEF;;;;;;;GAOG;AACH,IAAM,WAAA,GAAc,UAAA,MAAS;IAC3B,EAAE,CAAC,CAAC,CAAC,MAAC,CAAM,MAAC,EAAM,CAAE;QAAC,MAAA,CAAO,cAAM,OAAA,KAAA,EAAA,CAAA,CAAM;IACzC,IAAM,KAAA,GAAqB,MAAA,CAAO,MAAC,EAAM,CAAE;IAC3C,IAAM,eAAA,GAAkB,MAAA,CAAO,MAAC,EAAM,CAAE;IACxC,IAAM,UAAA,GAAyB,SAAA,CAAU,SAAC,CAAS,MAAC,CAAM,CAAC;IAC3D,IAAM,WAAA,GAAuB,UAAA,CAAW,GAAC,CAAG,UAAA,IAAC,IAAO,OAAA,IAAA,CAAK,WAAC,EAAN,CAAM,CAAW;SAChE,MAAC,CAAM,OAAC,EAAQ,EAAA,CAAG;SACnB,MAAC,CAAM,UAAC,KAAO,IAAU,OAAA,eAAA,CAAgB,cAAC,CAAc,KAAC,CAAK,EAAC,CAAE,EAAxC,CAAwC,CAAC,CAAC;IAExE,MAAM,CAAC,UAAA,IAAgB;QACrB,IAAM,QAAA,GAAW,IAAA,CAAK,IAAC,CAAI,CAAC;QAC5B,EAAE,CAAC,CAAC,CAAC,QAAC,IAAW,QAAA,CAAS,KAAC,KAAS,KAAA,CAAM;YAAC,MAAA,CAAO,KAAA,CAAM;QACxD,IAAM,WAAA,GAAc,SAAA,CAAU,WAAC,CAAW,IAAC,CAAI,CAAC;QAChD,MAAM,CAAC,KAAA,CAAM,MAAC,CAAM,WAAC,EAAY,WAAA,EAAa,eAAA,CAAgB,CAAC;IACjE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,0BAA0B,QAAmB,EAAG,UAAqB;IACnE,MAAM,CAAC,UAAA,CAAW,GAAC,CAAG,UAAA,IAAC,IAAO,OAAA,QAAA,CAAS,MAAC,CAAM,SAAC,CAAS,OAAC,CAAO,UAAC,EAAW,UAAA,CAAA,IAAK,OAAA,CAAA,CAAE,KAAC,KAAS,IAAA,CAAK,KAAC,EAAlB,CAAkB,CAAK,CAAC,EAA3E,CAA2E,CAAC,CAAC;AAC7G,CAAC;AAED;;;;;;;GAOG;AACH,uBAAuB,KAAO,EAAU,UAAY;IAClD,IAAM,iBAAA,GAAoB,WAAA,CAAY,UAAC,CAAU,CAAC;IAClD,IAAM,EAAA,GAAK,KAAA,CAAM,KAAC,CAAK,WAAC,EAAW,CAAE;IAErC,IAAM,YAAA,GAAe,KAAA,CAAM,GAAC,KAAO,OAAA,CAAQ;IAC3C,IAAM,cAAA,GAAiB,KAAA,CAAM,GAAC,KAAO,SAAA,CAAU;IAC/C,IAAM,UAAA,GAAyB,cAAA,CAAe,CAAA,CAAE,EAAA,CAAG,EAAC,CAAE,CAAA,CAAE,EAAA,CAAG,IAAC,CAAI;IAEhE,IAAM,QAAA,GAAW;QACb,OAAA,gBAAgB,CAAC,EAAC,EAAG,UAAA,CAAW;aAC3B,GAAC,CAAG,iBAAC,CAAiB;aACtB,MAAC,CAAM,QAAC,EAAS,KAAA,CAAM;IAF5B,CAE4B,CAAC;IAEjC,IAAM,OAAA,GAAU;QACZ,OAAA,iBAAiB,CAAC,UAAC,CAAU;IAA7B,CAA6B,CAAC;IAElC,IAAM,UAAA,GAAa;QACf,OAAA,gBAAgB,CAAC,EAAC,CAAE,QAAC,EAAS,EAAA,CAAG,QAAC,CAAQ;aACrC,GAAC,CAAG,iBAAC,CAAiB;aACtB,MAAC,CAAM,QAAC,EAAS,KAAA,CAAM;IAF5B,CAE4B,CAAC;IAEjC,IAAM,SAAA,GAAY;QACd,OAAA,gBAAgB,CAAC,EAAC,CAAE,QAAC,EAAS,EAAA,CAAG,OAAC,CAAO;aACpC,GAAC,CAAG,iBAAC,CAAiB;aACtB,MAAC,CAAM,QAAC,EAAS,KAAA,CAAM;IAF5B,CAE4B,CAAC;IAEjC,MAAM,CAAC;QACL,MAAM,EAAE,QAAA,EAAS;QACjB,KAAK,EAAE,OAAA,EAAQ;QACf,QAAQ,EAAE,YAAA,CAAa,CAAA,CAAE,UAAA,EAAW,CAAE,CAAA,CAAE,KAAA;QACxC,OAAO,EAAE,YAAA,CAAa,CAAA,CAAE,SAAA,EAAU,CAAE,CAAA,CAAE,KAAA;QACtC,YAAY,EAAE,CAAA,UAAE,CAAU;KACvB,CAAW;AAClB,CAAC;AAED,mBAAmB;AACnB,yBAAyB,IAAM,EAAY,KAAO;IAChD,MAAM,CAAC;QACL,MAAM,EAAE,IAAA,CAAK,MAAC,IAAS,KAAA,CAAM,MAAC;QAC9B,KAAK,EAAE,IAAA,CAAK,KAAC,IAAQ,KAAA,CAAM,KAAC;QAC5B,QAAQ,EAAE,IAAA,CAAK,QAAC,IAAW,KAAA,CAAM,QAAC;QAClC,OAAO,EAAE,IAAA,CAAK,OAAC,IAAU,KAAA,CAAM,OAAC;QAChC,YAAY,EAAE,IAAA,CAAK,YAAC,CAAY,MAAC,CAAM,KAAC,CAAK,YAAC,CAAY;KAC3D,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AAEH;IAaE,sBAAY,QAAyB;QAZrC,8EAA8E;QAC7E,iBAAY,GAAG,IAAI,YAAY,CAAa,KAAK,CAAC,CAAC;QAYlD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;IAClD,CAAC;IAED,yCAAkB,GAAlB;QAAA,iBA+BC;QA9BC,kDAAkD;QAClD,2BAA2B;QAC3B,IAAM,YAAY,GAAyB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAC,KAAiB;YAChG,IAAM,KAAK,GAAG,UAAC,GAAW,IAAK,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAe,CAAA,EAA5B,CAA4B,CAAC;YAE5D,IAAM,WAAW,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvC,IAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,CAAC,SAAS,CAAC,EAAhB,CAAgB,EAAE,cAAM,OAAA,KAAK,CAAC,OAAO,CAAC,EAAd,CAAc,CAAC,CAAC;YACrF,IAAM,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;YAE9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,6EAA6E;QAE7E,0FAA0F;QAC1F,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAExF,IAAM,aAAa,GACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAC,KAAe;YACzC,OAAA,aAAa,CAAgB,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,YAAY,EAAjB,CAAiB,CAAC,CAAC;QAAlE,CAAkE,CAAC,CAAC;QAE5E,qEAAqE;QACrE,yDAAyD;QACzD,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,UAAC,GAAa;YAC9D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,UAAC,OAAsB;gBACpD,IAAM,QAAQ,GAAiB,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC;gBACjF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,kCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YAAC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IACvE,CAAC;IAEO,iCAAU,GAAlB,UAAmB,MAAkB;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,gDAAgD;oBAC1D,QAAQ,EAAE,cAAc;iBACzB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;KACxB,EAF6F,CAE7F,CAAC;IACK,2BAAc,GAA2C;QAChE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;QAC7D,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAG,EAAE,EAAE;KAC9E,CAAC;IACF,mBAAC;CA5ED,AA4EC,IAAA;SA5EY,YAAY",
  "file": "uiSrefStatus.js",
  "sourceRoot": "",
  "sourcesContent": [
    "/** @ng2api @module directives */\n/** */\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils, StateOrName\n} from '@uirouter/core';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { of } from 'rxjs/observable/of';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { map } from 'rxjs/operator/map';\nimport { concat } from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n  /** The enclosed sref(s) target state(s) */\n  targetStates: TargetState[];\n}\n\n/** @internalapi */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n  targetStates: [],\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  const state: StateObject = target.$state();\n  const targetParamVals = target.params();\n  const targetPath: PathNode[] = PathUtils.buildPath(target);\n  const paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    const tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    const paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  const isStartEvent = event.evt === 'start';\n  const isSuccessEvent = event.evt === 'success';\n  const activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n    targetStates: [srefTarget],\n  } as SrefStatus;\n}\n\n/** @internalapi */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus): SrefStatus {\n  return {\n    active: left.active || right.active,\n    exact: left.exact || right.exact,\n    entering: left.entering || right.entering,\n    exiting: left.exiting || right.exiting,\n    targetStates: left.targetStates.concat(right.targetStates),\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n   uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n   private _srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internalapi */ private _subscription: Subscription;\n  /** @internalapi */ private _srefChangesSub: Subscription;\n  /** @internalapi */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internalapi */ private _globals: UIRouterGlobals;\n  constructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    const transEvents$: Observable<TransEvt> = switchMap.call(this._globals.start$, (trans: Transition) => {\n      const event = (evt: string) => ({ evt, trans } as TransEvt);\n\n      const transStart$ = of(event('start'));\n      const transResult = trans.promise.then(() => event('success'), () => event('error'));\n      const transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this._srefs.toArray());\n    this._srefChangesSub = this._srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    const targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = switchMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        const statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n  exportAs: 'uiSrefStatus'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouterGlobals, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uiSrefStatus': [{ type: Output, args: ['uiSrefStatus', ] },],\n'_srefs': [{ type: ContentChildren, args: [UISref, { descendants: true }, ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"
  ]
}